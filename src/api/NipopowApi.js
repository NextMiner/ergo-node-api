/**
 * Ergo Node API
 * API docs for Ergo Node. Models are shared between all Ergo products
 *
 * The version of the OpenAPI document: 4.0.14
 * Contact: ergoplatform@protonmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ApiError from '../model/ApiError';
import NipopowProof from '../model/NipopowProof';
import PopowHeader from '../model/PopowHeader';

/**
* Nipopow service.
* @module api/NipopowApi
* @version 4.0.14
*/
export default class NipopowApi {

    /**
    * Constructs a new NipopowApi. 
    * @alias module:api/NipopowApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getPopowHeaderByHeight operation.
     * @callback module:api/NipopowApi~getPopowHeaderByHeightCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PopowHeader} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Construct PoPow header for best header at given height
     * @param {Number} height Height of a wanted header
     * @param {module:api/NipopowApi~getPopowHeaderByHeightCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PopowHeader}
     */
    getPopowHeaderByHeight(height, callback) {
      let postBody = null;
      // verify the required parameter 'height' is set
      if (height === undefined || height === null) {
        throw new Error("Missing the required parameter 'height' when calling getPopowHeaderByHeight");
      }

      let pathParams = {
        'height': height
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PopowHeader;
      return this.apiClient.callApi(
        '/nipopow/popowHeaderByHeight/{height}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPopowHeaderById operation.
     * @callback module:api/NipopowApi~getPopowHeaderByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PopowHeader} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Construct PoPow header according to given header id
     * @param {String} headerId ID of wanted header
     * @param {module:api/NipopowApi~getPopowHeaderByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PopowHeader}
     */
    getPopowHeaderById(headerId, callback) {
      let postBody = null;
      // verify the required parameter 'headerId' is set
      if (headerId === undefined || headerId === null) {
        throw new Error("Missing the required parameter 'headerId' when calling getPopowHeaderById");
      }

      let pathParams = {
        'headerId': headerId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PopowHeader;
      return this.apiClient.callApi(
        '/nipopow/popowHeaderById/{headerId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPopowProof operation.
     * @callback module:api/NipopowApi~getPopowProofCallback
     * @param {String} error Error message, if any.
     * @param {module:model/NipopowProof} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Construct PoPoW proof for given min superchain length and suffix length
     * @param {Number} minChainLength Minimal superchain length
     * @param {Number} suffixLength Suffix length
     * @param {module:api/NipopowApi~getPopowProofCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/NipopowProof}
     */
    getPopowProof(minChainLength, suffixLength, callback) {
      let postBody = null;
      // verify the required parameter 'minChainLength' is set
      if (minChainLength === undefined || minChainLength === null) {
        throw new Error("Missing the required parameter 'minChainLength' when calling getPopowProof");
      }
      // verify the required parameter 'suffixLength' is set
      if (suffixLength === undefined || suffixLength === null) {
        throw new Error("Missing the required parameter 'suffixLength' when calling getPopowProof");
      }

      let pathParams = {
        'minChainLength': minChainLength,
        'suffixLength': suffixLength
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = NipopowProof;
      return this.apiClient.callApi(
        '/nipopow/proof/{minChainLength}/{suffixLength}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPopowProofByHeaderId operation.
     * @callback module:api/NipopowApi~getPopowProofByHeaderIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/NipopowProof} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Construct PoPoW proof for given min superchain length, suffix length and header ID
     * @param {Number} minChainLength Minimal superchain length
     * @param {Number} suffixLength Suffix length
     * @param {String} headerId ID of wanted header
     * @param {module:api/NipopowApi~getPopowProofByHeaderIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/NipopowProof}
     */
    getPopowProofByHeaderId(minChainLength, suffixLength, headerId, callback) {
      let postBody = null;
      // verify the required parameter 'minChainLength' is set
      if (minChainLength === undefined || minChainLength === null) {
        throw new Error("Missing the required parameter 'minChainLength' when calling getPopowProofByHeaderId");
      }
      // verify the required parameter 'suffixLength' is set
      if (suffixLength === undefined || suffixLength === null) {
        throw new Error("Missing the required parameter 'suffixLength' when calling getPopowProofByHeaderId");
      }
      // verify the required parameter 'headerId' is set
      if (headerId === undefined || headerId === null) {
        throw new Error("Missing the required parameter 'headerId' when calling getPopowProofByHeaderId");
      }

      let pathParams = {
        'minChainLength': minChainLength,
        'suffixLength': suffixLength,
        'headerId': headerId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = NipopowProof;
      return this.apiClient.callApi(
        '/nipopow/proof/{minChainLength}/{suffixLength}/{headerId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
