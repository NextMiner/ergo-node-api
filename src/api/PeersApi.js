/**
 * Ergo Node API
 * API docs for Ergo Node. Models are shared between all Ergo products
 *
 * The version of the OpenAPI document: 4.0.14
 * Contact: ergoplatform@protonmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ApiError from '../model/ApiError';
import BlacklistedPeers from '../model/BlacklistedPeers';
import Peer from '../model/Peer';
import PeersStatus from '../model/PeersStatus';

/**
* Peers service.
* @module api/PeersApi
* @version 4.0.14
*/
export default class PeersApi {

    /**
    * Constructs a new PeersApi. 
    * @alias module:api/PeersApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the connectToPeer operation.
     * @callback module:api/PeersApi~connectToPeerCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add address to peers list
     * @param {String} body 
     * @param {module:api/PeersApi~connectToPeerCallback} callback The callback function, accepting three arguments: error, data, response
     */
    connectToPeer(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling connectToPeer");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/peers/connect', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAllPeers operation.
     * @callback module:api/PeersApi~getAllPeersCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Peer>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all known peers
     * @param {module:api/PeersApi~getAllPeersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Peer>}
     */
    getAllPeers(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Peer];
      return this.apiClient.callApi(
        '/peers/all', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getBlacklistedPeers operation.
     * @callback module:api/PeersApi~getBlacklistedPeersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BlacklistedPeers} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get blacklisted peers
     * @param {module:api/PeersApi~getBlacklistedPeersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BlacklistedPeers}
     */
    getBlacklistedPeers(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = BlacklistedPeers;
      return this.apiClient.callApi(
        '/peers/blacklisted', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getConnectedPeers operation.
     * @callback module:api/PeersApi~getConnectedPeersCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Peer>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get current connected peers
     * @param {module:api/PeersApi~getConnectedPeersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Peer>}
     */
    getConnectedPeers(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Peer];
      return this.apiClient.callApi(
        '/peers/connected', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPeersStatus operation.
     * @callback module:api/PeersApi~getPeersStatusCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PeersStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get last incomming message timestamp and current network time
     * @param {module:api/PeersApi~getPeersStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PeersStatus}
     */
    getPeersStatus(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PeersStatus;
      return this.apiClient.callApi(
        '/peers/status', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
