/**
 * Ergo Node API
 * API docs for Ergo Node. Models are shared between all Ergo products
 *
 * The version of the OpenAPI document: 4.0.14
 * Contact: ergoplatform@protonmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ErgoTransactionOutput from './ErgoTransactionOutput';

/**
 * The WalletBox model module.
 * @module model/WalletBox
 * @version 4.0.14
 */
class WalletBox {
    /**
     * Constructs a new <code>WalletBox</code>.
     * @alias module:model/WalletBox
     * @param box {module:model/ErgoTransactionOutput} 
     * @param confirmationsNum {Number} Number of confirmations, if the box is included into the blockchain
     * @param address {String} Encoded Ergo Address
     * @param creationTransaction {String} Base16-encoded 32 byte modifier id
     * @param spendingTransaction {String} Base16-encoded 32 byte modifier id
     * @param spendingHeight {Number} The height the box was spent at
     * @param inclusionHeight {Number} The height the transaction containing the box was included in a block at
     * @param onchain {Boolean} A flag signalling whether the box is created on main chain
     * @param spent {Boolean} A flag signalling whether the box was spent
     * @param creationOutIndex {Number} An index of a box in the creating transaction
     * @param scans {Array.<Number>} Scan identifiers the box relates to
     */
    constructor(box, confirmationsNum, address, creationTransaction, spendingTransaction, spendingHeight, inclusionHeight, onchain, spent, creationOutIndex, scans) { 
        
        WalletBox.initialize(this, box, confirmationsNum, address, creationTransaction, spendingTransaction, spendingHeight, inclusionHeight, onchain, spent, creationOutIndex, scans);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, box, confirmationsNum, address, creationTransaction, spendingTransaction, spendingHeight, inclusionHeight, onchain, spent, creationOutIndex, scans) { 
        obj['box'] = box;
        obj['confirmationsNum'] = confirmationsNum;
        obj['address'] = address;
        obj['creationTransaction'] = creationTransaction;
        obj['spendingTransaction'] = spendingTransaction;
        obj['spendingHeight'] = spendingHeight;
        obj['inclusionHeight'] = inclusionHeight;
        obj['onchain'] = onchain;
        obj['spent'] = spent;
        obj['creationOutIndex'] = creationOutIndex;
        obj['scans'] = scans;
    }

    /**
     * Constructs a <code>WalletBox</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/WalletBox} obj Optional instance to populate.
     * @return {module:model/WalletBox} The populated <code>WalletBox</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new WalletBox();

            if (data.hasOwnProperty('box')) {
                obj['box'] = ErgoTransactionOutput.constructFromObject(data['box']);
            }
            if (data.hasOwnProperty('confirmationsNum')) {
                obj['confirmationsNum'] = ApiClient.convertToType(data['confirmationsNum'], 'Number');
            }
            if (data.hasOwnProperty('address')) {
                obj['address'] = ApiClient.convertToType(data['address'], 'String');
            }
            if (data.hasOwnProperty('creationTransaction')) {
                obj['creationTransaction'] = ApiClient.convertToType(data['creationTransaction'], 'String');
            }
            if (data.hasOwnProperty('spendingTransaction')) {
                obj['spendingTransaction'] = ApiClient.convertToType(data['spendingTransaction'], 'String');
            }
            if (data.hasOwnProperty('spendingHeight')) {
                obj['spendingHeight'] = ApiClient.convertToType(data['spendingHeight'], 'Number');
            }
            if (data.hasOwnProperty('inclusionHeight')) {
                obj['inclusionHeight'] = ApiClient.convertToType(data['inclusionHeight'], 'Number');
            }
            if (data.hasOwnProperty('onchain')) {
                obj['onchain'] = ApiClient.convertToType(data['onchain'], 'Boolean');
            }
            if (data.hasOwnProperty('spent')) {
                obj['spent'] = ApiClient.convertToType(data['spent'], 'Boolean');
            }
            if (data.hasOwnProperty('creationOutIndex')) {
                obj['creationOutIndex'] = ApiClient.convertToType(data['creationOutIndex'], 'Number');
            }
            if (data.hasOwnProperty('scans')) {
                obj['scans'] = ApiClient.convertToType(data['scans'], ['Number']);
            }
        }
        return obj;
    }


}

/**
 * @member {module:model/ErgoTransactionOutput} box
 */
WalletBox.prototype['box'] = undefined;

/**
 * Number of confirmations, if the box is included into the blockchain
 * @member {Number} confirmationsNum
 */
WalletBox.prototype['confirmationsNum'] = undefined;

/**
 * Encoded Ergo Address
 * @member {String} address
 */
WalletBox.prototype['address'] = undefined;

/**
 * Base16-encoded 32 byte modifier id
 * @member {String} creationTransaction
 */
WalletBox.prototype['creationTransaction'] = undefined;

/**
 * Base16-encoded 32 byte modifier id
 * @member {String} spendingTransaction
 */
WalletBox.prototype['spendingTransaction'] = undefined;

/**
 * The height the box was spent at
 * @member {Number} spendingHeight
 */
WalletBox.prototype['spendingHeight'] = undefined;

/**
 * The height the transaction containing the box was included in a block at
 * @member {Number} inclusionHeight
 */
WalletBox.prototype['inclusionHeight'] = undefined;

/**
 * A flag signalling whether the box is created on main chain
 * @member {Boolean} onchain
 */
WalletBox.prototype['onchain'] = undefined;

/**
 * A flag signalling whether the box was spent
 * @member {Boolean} spent
 */
WalletBox.prototype['spent'] = undefined;

/**
 * An index of a box in the creating transaction
 * @member {Number} creationOutIndex
 */
WalletBox.prototype['creationOutIndex'] = undefined;

/**
 * Scan identifiers the box relates to
 * @member {Array.<Number>} scans
 */
WalletBox.prototype['scans'] = undefined;






export default WalletBox;

