/**
 * Ergo Node API
 * API docs for Ergo Node. Models are shared between all Ergo products
 *
 * The version of the OpenAPI document: 4.0.14
 * Contact: ergoplatform@protonmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AddressHolder from '../model/AddressHolder';
import ApiError from '../model/ApiError';
import CryptoResult from '../model/CryptoResult';
import ExecuteScript from '../model/ExecuteScript';
import InlineResponse2007 from '../model/InlineResponse2007';
import InlineResponse2008 from '../model/InlineResponse2008';
import SourceHolder from '../model/SourceHolder';

/**
* Script service.
* @module api/ScriptApi
* @version 4.0.14
*/
export default class ScriptApi {

    /**
    * Constructs a new ScriptApi. 
    * @alias module:api/ScriptApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the addressToBytes operation.
     * @callback module:api/ScriptApi~addressToBytesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2008} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Convert an address to hex-encoded Sigma byte array constant which contains script bytes
     * @param {String} address address to get a script from
     * @param {module:api/ScriptApi~addressToBytesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse2008}
     */
    addressToBytes(address, callback) {
      let postBody = null;
      // verify the required parameter 'address' is set
      if (address === undefined || address === null) {
        throw new Error("Missing the required parameter 'address' when calling addressToBytes");
      }

      let pathParams = {
        'address': address
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse2008;
      return this.apiClient.callApi(
        '/script/addressToBytes/{address}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the addressToTree operation.
     * @callback module:api/ScriptApi~addressToTreeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2007} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Convert an address to hex-encoded serialized ErgoTree (script)
     * @param {String} address address to get a script from
     * @param {module:api/ScriptApi~addressToTreeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse2007}
     */
    addressToTree(address, callback) {
      let postBody = null;
      // verify the required parameter 'address' is set
      if (address === undefined || address === null) {
        throw new Error("Missing the required parameter 'address' when calling addressToTree");
      }

      let pathParams = {
        'address': address
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse2007;
      return this.apiClient.callApi(
        '/script/addressToTree/{address}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the executeWithContext operation.
     * @callback module:api/ScriptApi~executeWithContextCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CryptoResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Execute script with context
     * @param {module:model/ExecuteScript} executeScript 
     * @param {module:api/ScriptApi~executeWithContextCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CryptoResult}
     */
    executeWithContext(executeScript, callback) {
      let postBody = executeScript;
      // verify the required parameter 'executeScript' is set
      if (executeScript === undefined || executeScript === null) {
        throw new Error("Missing the required parameter 'executeScript' when calling executeWithContext");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CryptoResult;
      return this.apiClient.callApi(
        '/script/executeWithContext', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the scriptP2SAddress operation.
     * @callback module:api/ScriptApi~scriptP2SAddressCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AddressHolder} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create P2SAddress from Sigma source
     * @param {module:model/SourceHolder} sourceHolder 
     * @param {module:api/ScriptApi~scriptP2SAddressCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AddressHolder}
     */
    scriptP2SAddress(sourceHolder, callback) {
      let postBody = sourceHolder;
      // verify the required parameter 'sourceHolder' is set
      if (sourceHolder === undefined || sourceHolder === null) {
        throw new Error("Missing the required parameter 'sourceHolder' when calling scriptP2SAddress");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AddressHolder;
      return this.apiClient.callApi(
        '/script/p2sAddress', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the scriptP2SHAddress operation.
     * @callback module:api/ScriptApi~scriptP2SHAddressCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AddressHolder} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create P2SHAddress from Sigma source
     * @param {module:model/SourceHolder} sourceHolder 
     * @param {module:api/ScriptApi~scriptP2SHAddressCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AddressHolder}
     */
    scriptP2SHAddress(sourceHolder, callback) {
      let postBody = sourceHolder;
      // verify the required parameter 'sourceHolder' is set
      if (sourceHolder === undefined || sourceHolder === null) {
        throw new Error("Missing the required parameter 'sourceHolder' when calling scriptP2SHAddress");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AddressHolder;
      return this.apiClient.callApi(
        '/script/p2shAddress', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
