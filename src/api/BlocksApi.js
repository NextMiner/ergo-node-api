/**
 * Ergo Node API
 * API docs for Ergo Node. Models are shared between all Ergo products
 *
 * The version of the OpenAPI document: 4.0.14
 * Contact: ergoplatform@protonmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ApiError from '../model/ApiError';
import BlockHeader from '../model/BlockHeader';
import BlockTransactions from '../model/BlockTransactions';
import FullBlock from '../model/FullBlock';
import MerkleProof from '../model/MerkleProof';

/**
* Blocks service.
* @module api/BlocksApi
* @version 4.0.14
*/
export default class BlocksApi {

    /**
    * Constructs a new BlocksApi. 
    * @alias module:api/BlocksApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getBlockHeaderById operation.
     * @callback module:api/BlocksApi~getBlockHeaderByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BlockHeader} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the block header info by a given signature
     * @param {String} headerId ID of a wanted block header
     * @param {module:api/BlocksApi~getBlockHeaderByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BlockHeader}
     */
    getBlockHeaderById(headerId, callback) {
      let postBody = null;
      // verify the required parameter 'headerId' is set
      if (headerId === undefined || headerId === null) {
        throw new Error("Missing the required parameter 'headerId' when calling getBlockHeaderById");
      }

      let pathParams = {
        'headerId': headerId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = BlockHeader;
      return this.apiClient.callApi(
        '/blocks/{headerId}/header', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getBlockTransactionsById operation.
     * @callback module:api/BlocksApi~getBlockTransactionsByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BlockTransactions} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the block transactions info by a given signature
     * @param {String} headerId ID of a wanted block transactions
     * @param {module:api/BlocksApi~getBlockTransactionsByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BlockTransactions}
     */
    getBlockTransactionsById(headerId, callback) {
      let postBody = null;
      // verify the required parameter 'headerId' is set
      if (headerId === undefined || headerId === null) {
        throw new Error("Missing the required parameter 'headerId' when calling getBlockTransactionsById");
      }

      let pathParams = {
        'headerId': headerId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = BlockTransactions;
      return this.apiClient.callApi(
        '/blocks/{headerId}/transactions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getChainSlice operation.
     * @callback module:api/BlocksApi~getChainSliceCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/BlockHeader>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get headers in a specified range
     * @param {Object} opts Optional parameters
     * @param {Number} opts.fromHeight Min header height (default to 0)
     * @param {Number} opts.toHeight Max header height (best header height by default) (default to -1)
     * @param {module:api/BlocksApi~getChainSliceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/BlockHeader>}
     */
    getChainSlice(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'fromHeight': opts['fromHeight'],
        'toHeight': opts['toHeight']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [BlockHeader];
      return this.apiClient.callApi(
        '/blocks/chainSlice', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getFullBlockAt operation.
     * @callback module:api/BlocksApi~getFullBlockAtCallback
     * @param {String} error Error message, if any.
     * @param {Array.<String>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the header ids at a given height
     * @param {Number} blockHeight Height of a wanted block
     * @param {module:api/BlocksApi~getFullBlockAtCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<String>}
     */
    getFullBlockAt(blockHeight, callback) {
      let postBody = null;
      // verify the required parameter 'blockHeight' is set
      if (blockHeight === undefined || blockHeight === null) {
        throw new Error("Missing the required parameter 'blockHeight' when calling getFullBlockAt");
      }

      let pathParams = {
        'blockHeight': blockHeight
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ['String'];
      return this.apiClient.callApi(
        '/blocks/at/{blockHeight}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getFullBlockById operation.
     * @callback module:api/BlocksApi~getFullBlockByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FullBlock} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the full block info by a given signature
     * @param {String} headerId ID of a wanted block
     * @param {module:api/BlocksApi~getFullBlockByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FullBlock}
     */
    getFullBlockById(headerId, callback) {
      let postBody = null;
      // verify the required parameter 'headerId' is set
      if (headerId === undefined || headerId === null) {
        throw new Error("Missing the required parameter 'headerId' when calling getFullBlockById");
      }

      let pathParams = {
        'headerId': headerId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = FullBlock;
      return this.apiClient.callApi(
        '/blocks/{headerId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getHeaderIds operation.
     * @callback module:api/BlocksApi~getHeaderIdsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<String>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the Array of header ids
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit The number of items in list to return (default to 50)
     * @param {Number} opts.offset The number of items in list to skip (default to 0)
     * @param {module:api/BlocksApi~getHeaderIdsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<String>}
     */
    getHeaderIds(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ['String'];
      return this.apiClient.callApi(
        '/blocks', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getLastHeaders operation.
     * @callback module:api/BlocksApi~getLastHeadersCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/BlockHeader>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the last headers objects
     * @param {Number} count count of a wanted block headers
     * @param {module:api/BlocksApi~getLastHeadersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/BlockHeader>}
     */
    getLastHeaders(count, callback) {
      let postBody = null;
      // verify the required parameter 'count' is set
      if (count === undefined || count === null) {
        throw new Error("Missing the required parameter 'count' when calling getLastHeaders");
      }

      let pathParams = {
        'count': count
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [BlockHeader];
      return this.apiClient.callApi(
        '/blocks/lastHeaders/{count}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getModifierById operation.
     * @callback module:api/BlocksApi~getModifierByIdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the persistent modifier by its id
     * @param {String} modifierId ID of a wanted modifier
     * @param {module:api/BlocksApi~getModifierByIdCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getModifierById(modifierId, callback) {
      let postBody = null;
      // verify the required parameter 'modifierId' is set
      if (modifierId === undefined || modifierId === null) {
        throw new Error("Missing the required parameter 'modifierId' when calling getModifierById");
      }

      let pathParams = {
        'modifierId': modifierId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/blocks/modifier/{modifierId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getProofForTx operation.
     * @callback module:api/BlocksApi~getProofForTxCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MerkleProof} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Merkle proof for transaction
     * @param {String} headerId ID of a wanted block transactions
     * @param {String} txId ID of a wanted transaction
     * @param {module:api/BlocksApi~getProofForTxCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MerkleProof}
     */
    getProofForTx(headerId, txId, callback) {
      let postBody = null;
      // verify the required parameter 'headerId' is set
      if (headerId === undefined || headerId === null) {
        throw new Error("Missing the required parameter 'headerId' when calling getProofForTx");
      }
      // verify the required parameter 'txId' is set
      if (txId === undefined || txId === null) {
        throw new Error("Missing the required parameter 'txId' when calling getProofForTx");
      }

      let pathParams = {
        'headerId': headerId,
        'txId': txId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = MerkleProof;
      return this.apiClient.callApi(
        '/blocks/{headerId}/proofFor/{txId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sendMinedBlock operation.
     * @callback module:api/BlocksApi~sendMinedBlockCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Send a mined block
     * @param {module:model/FullBlock} fullBlock 
     * @param {module:api/BlocksApi~sendMinedBlockCallback} callback The callback function, accepting three arguments: error, data, response
     */
    sendMinedBlock(fullBlock, callback) {
      let postBody = fullBlock;
      // verify the required parameter 'fullBlock' is set
      if (fullBlock === undefined || fullBlock === null) {
        throw new Error("Missing the required parameter 'fullBlock' when calling sendMinedBlock");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/blocks', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
