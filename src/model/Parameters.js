/**
 * Ergo Node API
 * API docs for Ergo Node. Models are shared between all Ergo products
 *
 * The version of the OpenAPI document: 4.0.14
 * Contact: ergoplatform@protonmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Parameters model module.
 * @module model/Parameters
 * @version 4.0.14
 */
class Parameters {
    /**
     * Constructs a new <code>Parameters</code>.
     * @alias module:model/Parameters
     * @param height {Number} Height when current parameters were considered(not actual height). Can be '0' if state is empty
     * @param storageFeeFactor {Number} Storage fee coefficient (per byte per storage period ~4 years)
     * @param minValuePerByte {Number} Minimum value per byte of an output
     * @param maxBlockSize {Number} Maximum block size (in bytes)
     * @param maxBlockCost {Number} Maximum cumulative computational cost of input scripts in block transactions
     * @param blockVersion {Number} Ergo blockchain protocol version
     * @param tokenAccessCost {Number} Validation cost of a single token
     * @param inputCost {Number} Validation cost per one transaction input
     * @param dataInputCost {Number} Validation cost per one data input
     * @param outputCost {Number} Validation cost per one transaction output
     */
    constructor(height, storageFeeFactor, minValuePerByte, maxBlockSize, maxBlockCost, blockVersion, tokenAccessCost, inputCost, dataInputCost, outputCost) { 
        
        Parameters.initialize(this, height, storageFeeFactor, minValuePerByte, maxBlockSize, maxBlockCost, blockVersion, tokenAccessCost, inputCost, dataInputCost, outputCost);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, height, storageFeeFactor, minValuePerByte, maxBlockSize, maxBlockCost, blockVersion, tokenAccessCost, inputCost, dataInputCost, outputCost) { 
        obj['height'] = height;
        obj['storageFeeFactor'] = storageFeeFactor;
        obj['minValuePerByte'] = minValuePerByte;
        obj['maxBlockSize'] = maxBlockSize;
        obj['maxBlockCost'] = maxBlockCost;
        obj['blockVersion'] = blockVersion;
        obj['tokenAccessCost'] = tokenAccessCost;
        obj['inputCost'] = inputCost;
        obj['dataInputCost'] = dataInputCost;
        obj['outputCost'] = outputCost;
    }

    /**
     * Constructs a <code>Parameters</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Parameters} obj Optional instance to populate.
     * @return {module:model/Parameters} The populated <code>Parameters</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Parameters();

            if (data.hasOwnProperty('height')) {
                obj['height'] = ApiClient.convertToType(data['height'], 'Number');
            }
            if (data.hasOwnProperty('storageFeeFactor')) {
                obj['storageFeeFactor'] = ApiClient.convertToType(data['storageFeeFactor'], 'Number');
            }
            if (data.hasOwnProperty('minValuePerByte')) {
                obj['minValuePerByte'] = ApiClient.convertToType(data['minValuePerByte'], 'Number');
            }
            if (data.hasOwnProperty('maxBlockSize')) {
                obj['maxBlockSize'] = ApiClient.convertToType(data['maxBlockSize'], 'Number');
            }
            if (data.hasOwnProperty('maxBlockCost')) {
                obj['maxBlockCost'] = ApiClient.convertToType(data['maxBlockCost'], 'Number');
            }
            if (data.hasOwnProperty('blockVersion')) {
                obj['blockVersion'] = ApiClient.convertToType(data['blockVersion'], 'Number');
            }
            if (data.hasOwnProperty('tokenAccessCost')) {
                obj['tokenAccessCost'] = ApiClient.convertToType(data['tokenAccessCost'], 'Number');
            }
            if (data.hasOwnProperty('inputCost')) {
                obj['inputCost'] = ApiClient.convertToType(data['inputCost'], 'Number');
            }
            if (data.hasOwnProperty('dataInputCost')) {
                obj['dataInputCost'] = ApiClient.convertToType(data['dataInputCost'], 'Number');
            }
            if (data.hasOwnProperty('outputCost')) {
                obj['outputCost'] = ApiClient.convertToType(data['outputCost'], 'Number');
            }
        }
        return obj;
    }


}

/**
 * Height when current parameters were considered(not actual height). Can be '0' if state is empty
 * @member {Number} height
 */
Parameters.prototype['height'] = undefined;

/**
 * Storage fee coefficient (per byte per storage period ~4 years)
 * @member {Number} storageFeeFactor
 */
Parameters.prototype['storageFeeFactor'] = undefined;

/**
 * Minimum value per byte of an output
 * @member {Number} minValuePerByte
 */
Parameters.prototype['minValuePerByte'] = undefined;

/**
 * Maximum block size (in bytes)
 * @member {Number} maxBlockSize
 */
Parameters.prototype['maxBlockSize'] = undefined;

/**
 * Maximum cumulative computational cost of input scripts in block transactions
 * @member {Number} maxBlockCost
 */
Parameters.prototype['maxBlockCost'] = undefined;

/**
 * Ergo blockchain protocol version
 * @member {Number} blockVersion
 */
Parameters.prototype['blockVersion'] = undefined;

/**
 * Validation cost of a single token
 * @member {Number} tokenAccessCost
 */
Parameters.prototype['tokenAccessCost'] = undefined;

/**
 * Validation cost per one transaction input
 * @member {Number} inputCost
 */
Parameters.prototype['inputCost'] = undefined;

/**
 * Validation cost per one data input
 * @member {Number} dataInputCost
 */
Parameters.prototype['dataInputCost'] = undefined;

/**
 * Validation cost per one transaction output
 * @member {Number} outputCost
 */
Parameters.prototype['outputCost'] = undefined;






export default Parameters;

