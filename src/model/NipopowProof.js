/**
 * Ergo Node API
 * API docs for Ergo Node. Models are shared between all Ergo products
 *
 * The version of the OpenAPI document: 4.0.14
 * Contact: ergoplatform@protonmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import BlockHeader from './BlockHeader';
import PopowHeader from './PopowHeader';

/**
 * The NipopowProof model module.
 * @module model/NipopowProof
 * @version 4.0.14
 */
class NipopowProof {
    /**
     * Constructs a new <code>NipopowProof</code>.
     * @alias module:model/NipopowProof
     * @param m {Number} security parameter (min μ-level superchain length)
     * @param k {Number} security parameter (min suffix length, >= 1)
     * @param prefix {Array.<module:model/PopowHeader>} proof prefix headers
     * @param suffixHead {module:model/PopowHeader} 
     * @param suffixTail {Array.<module:model/BlockHeader>} tail of the proof suffix headers
     */
    constructor(m, k, prefix, suffixHead, suffixTail) { 
        
        NipopowProof.initialize(this, m, k, prefix, suffixHead, suffixTail);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, m, k, prefix, suffixHead, suffixTail) { 
        obj['m'] = m;
        obj['k'] = k;
        obj['prefix'] = prefix;
        obj['suffixHead'] = suffixHead;
        obj['suffixTail'] = suffixTail;
    }

    /**
     * Constructs a <code>NipopowProof</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/NipopowProof} obj Optional instance to populate.
     * @return {module:model/NipopowProof} The populated <code>NipopowProof</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new NipopowProof();

            if (data.hasOwnProperty('m')) {
                obj['m'] = ApiClient.convertToType(data['m'], 'Number');
            }
            if (data.hasOwnProperty('k')) {
                obj['k'] = ApiClient.convertToType(data['k'], 'Number');
            }
            if (data.hasOwnProperty('prefix')) {
                obj['prefix'] = ApiClient.convertToType(data['prefix'], [PopowHeader]);
            }
            if (data.hasOwnProperty('suffixHead')) {
                obj['suffixHead'] = PopowHeader.constructFromObject(data['suffixHead']);
            }
            if (data.hasOwnProperty('suffixTail')) {
                obj['suffixTail'] = ApiClient.convertToType(data['suffixTail'], [BlockHeader]);
            }
        }
        return obj;
    }


}

/**
 * security parameter (min μ-level superchain length)
 * @member {Number} m
 */
NipopowProof.prototype['m'] = undefined;

/**
 * security parameter (min suffix length, >= 1)
 * @member {Number} k
 */
NipopowProof.prototype['k'] = undefined;

/**
 * proof prefix headers
 * @member {Array.<module:model/PopowHeader>} prefix
 */
NipopowProof.prototype['prefix'] = undefined;

/**
 * @member {module:model/PopowHeader} suffixHead
 */
NipopowProof.prototype['suffixHead'] = undefined;

/**
 * tail of the proof suffix headers
 * @member {Array.<module:model/BlockHeader>} suffixTail
 */
NipopowProof.prototype['suffixTail'] = undefined;






export default NipopowProof;

