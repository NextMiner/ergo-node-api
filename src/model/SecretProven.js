/**
 * Ergo Node API
 * API docs for Ergo Node. Models are shared between all Ergo products
 *
 * The version of the OpenAPI document: 4.0.14
 * Contact: ergoplatform@protonmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import SigmaBoolean from './SigmaBoolean';

/**
 * The SecretProven model module.
 * @module model/SecretProven
 * @version 4.0.14
 */
class SecretProven {
    /**
     * Constructs a new <code>SecretProven</code>.
     * @alias module:model/SecretProven
     * @param hint {module:model/SecretProven.HintEnum} 
     * @param challenge {String} 
     * @param pubkey {module:model/SigmaBoolean} 
     * @param proof {String} 
     * @param position {String} 
     */
    constructor(hint, challenge, pubkey, proof, position) { 
        
        SecretProven.initialize(this, hint, challenge, pubkey, proof, position);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, hint, challenge, pubkey, proof, position) { 
        obj['hint'] = hint;
        obj['challenge'] = challenge;
        obj['pubkey'] = pubkey;
        obj['proof'] = proof;
        obj['position'] = position;
    }

    /**
     * Constructs a <code>SecretProven</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SecretProven} obj Optional instance to populate.
     * @return {module:model/SecretProven} The populated <code>SecretProven</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SecretProven();

            if (data.hasOwnProperty('hint')) {
                obj['hint'] = ApiClient.convertToType(data['hint'], 'String');
            }
            if (data.hasOwnProperty('challenge')) {
                obj['challenge'] = ApiClient.convertToType(data['challenge'], 'String');
            }
            if (data.hasOwnProperty('pubkey')) {
                obj['pubkey'] = SigmaBoolean.constructFromObject(data['pubkey']);
            }
            if (data.hasOwnProperty('proof')) {
                obj['proof'] = ApiClient.convertToType(data['proof'], 'String');
            }
            if (data.hasOwnProperty('position')) {
                obj['position'] = ApiClient.convertToType(data['position'], 'String');
            }
        }
        return obj;
    }


}

/**
 * @member {module:model/SecretProven.HintEnum} hint
 */
SecretProven.prototype['hint'] = undefined;

/**
 * @member {String} challenge
 */
SecretProven.prototype['challenge'] = undefined;

/**
 * @member {module:model/SigmaBoolean} pubkey
 */
SecretProven.prototype['pubkey'] = undefined;

/**
 * @member {String} proof
 */
SecretProven.prototype['proof'] = undefined;

/**
 * @member {String} position
 */
SecretProven.prototype['position'] = undefined;





/**
 * Allowed values for the <code>hint</code> property.
 * @enum {String}
 * @readonly
 */
SecretProven['HintEnum'] = {

    /**
     * value: "proofReal"
     * @const
     */
    "proofReal": "proofReal",

    /**
     * value: "proofSimulated"
     * @const
     */
    "proofSimulated": "proofSimulated"
};



export default SecretProven;

