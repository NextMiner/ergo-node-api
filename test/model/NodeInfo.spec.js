/**
 * Ergo Node API
 * API docs for Ergo Node. Models are shared between all Ergo products
 *
 * The version of the OpenAPI document: 4.0.14
 * Contact: ergoplatform@protonmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.ErgoNodeApi);
  }
}(this, function(expect, ErgoNodeApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new ErgoNodeApi.NodeInfo();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('NodeInfo', function() {
    it('should create an instance of NodeInfo', function() {
      // uncomment below and update the code to test NodeInfo
      //var instane = new ErgoNodeApi.NodeInfo();
      //expect(instance).to.be.a(ErgoNodeApi.NodeInfo);
    });

    it('should have the property name (base name: "name")', function() {
      // uncomment below and update the code to test the property name
      //var instance = new ErgoNodeApi.NodeInfo();
      //expect(instance).to.be();
    });

    it('should have the property appVersion (base name: "appVersion")', function() {
      // uncomment below and update the code to test the property appVersion
      //var instance = new ErgoNodeApi.NodeInfo();
      //expect(instance).to.be();
    });

    it('should have the property fullHeight (base name: "fullHeight")', function() {
      // uncomment below and update the code to test the property fullHeight
      //var instance = new ErgoNodeApi.NodeInfo();
      //expect(instance).to.be();
    });

    it('should have the property headersHeight (base name: "headersHeight")', function() {
      // uncomment below and update the code to test the property headersHeight
      //var instance = new ErgoNodeApi.NodeInfo();
      //expect(instance).to.be();
    });

    it('should have the property bestFullHeaderId (base name: "bestFullHeaderId")', function() {
      // uncomment below and update the code to test the property bestFullHeaderId
      //var instance = new ErgoNodeApi.NodeInfo();
      //expect(instance).to.be();
    });

    it('should have the property previousFullHeaderId (base name: "previousFullHeaderId")', function() {
      // uncomment below and update the code to test the property previousFullHeaderId
      //var instance = new ErgoNodeApi.NodeInfo();
      //expect(instance).to.be();
    });

    it('should have the property bestHeaderId (base name: "bestHeaderId")', function() {
      // uncomment below and update the code to test the property bestHeaderId
      //var instance = new ErgoNodeApi.NodeInfo();
      //expect(instance).to.be();
    });

    it('should have the property stateRoot (base name: "stateRoot")', function() {
      // uncomment below and update the code to test the property stateRoot
      //var instance = new ErgoNodeApi.NodeInfo();
      //expect(instance).to.be();
    });

    it('should have the property stateType (base name: "stateType")', function() {
      // uncomment below and update the code to test the property stateType
      //var instance = new ErgoNodeApi.NodeInfo();
      //expect(instance).to.be();
    });

    it('should have the property stateVersion (base name: "stateVersion")', function() {
      // uncomment below and update the code to test the property stateVersion
      //var instance = new ErgoNodeApi.NodeInfo();
      //expect(instance).to.be();
    });

    it('should have the property isMining (base name: "isMining")', function() {
      // uncomment below and update the code to test the property isMining
      //var instance = new ErgoNodeApi.NodeInfo();
      //expect(instance).to.be();
    });

    it('should have the property peersCount (base name: "peersCount")', function() {
      // uncomment below and update the code to test the property peersCount
      //var instance = new ErgoNodeApi.NodeInfo();
      //expect(instance).to.be();
    });

    it('should have the property unconfirmedCount (base name: "unconfirmedCount")', function() {
      // uncomment below and update the code to test the property unconfirmedCount
      //var instance = new ErgoNodeApi.NodeInfo();
      //expect(instance).to.be();
    });

    it('should have the property difficulty (base name: "difficulty")', function() {
      // uncomment below and update the code to test the property difficulty
      //var instance = new ErgoNodeApi.NodeInfo();
      //expect(instance).to.be();
    });

    it('should have the property currentTime (base name: "currentTime")', function() {
      // uncomment below and update the code to test the property currentTime
      //var instance = new ErgoNodeApi.NodeInfo();
      //expect(instance).to.be();
    });

    it('should have the property launchTime (base name: "launchTime")', function() {
      // uncomment below and update the code to test the property launchTime
      //var instance = new ErgoNodeApi.NodeInfo();
      //expect(instance).to.be();
    });

    it('should have the property headersScore (base name: "headersScore")', function() {
      // uncomment below and update the code to test the property headersScore
      //var instance = new ErgoNodeApi.NodeInfo();
      //expect(instance).to.be();
    });

    it('should have the property fullBlocksScore (base name: "fullBlocksScore")', function() {
      // uncomment below and update the code to test the property fullBlocksScore
      //var instance = new ErgoNodeApi.NodeInfo();
      //expect(instance).to.be();
    });

    it('should have the property genesisBlockId (base name: "genesisBlockId")', function() {
      // uncomment below and update the code to test the property genesisBlockId
      //var instance = new ErgoNodeApi.NodeInfo();
      //expect(instance).to.be();
    });

    it('should have the property parameters (base name: "parameters")', function() {
      // uncomment below and update the code to test the property parameters
      //var instance = new ErgoNodeApi.NodeInfo();
      //expect(instance).to.be();
    });

  });

}));
