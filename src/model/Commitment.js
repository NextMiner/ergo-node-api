/**
 * Ergo Node API
 * API docs for Ergo Node. Models are shared between all Ergo products
 *
 * The version of the OpenAPI document: 4.0.14
 * Contact: ergoplatform@protonmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import SigmaBoolean from './SigmaBoolean';

/**
 * The Commitment model module.
 * @module model/Commitment
 * @version 4.0.14
 */
class Commitment {
    /**
     * Constructs a new <code>Commitment</code>.
     * basic trait for prover commitments
     * @alias module:model/Commitment
     * @param hint {module:model/Commitment.HintEnum} 
     * @param pubkey {module:model/SigmaBoolean} 
     * @param position {String} 
     * @param a {String} a group element of the commitment
     */
    constructor(hint, pubkey, position, a) { 
        
        Commitment.initialize(this, hint, pubkey, position, a);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, hint, pubkey, position, a) { 
        obj['hint'] = hint;
        obj['pubkey'] = pubkey;
        obj['position'] = position;
        obj['a'] = a;
    }

    /**
     * Constructs a <code>Commitment</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Commitment} obj Optional instance to populate.
     * @return {module:model/Commitment} The populated <code>Commitment</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Commitment();

            if (data.hasOwnProperty('hint')) {
                obj['hint'] = ApiClient.convertToType(data['hint'], 'String');
            }
            if (data.hasOwnProperty('pubkey')) {
                obj['pubkey'] = SigmaBoolean.constructFromObject(data['pubkey']);
            }
            if (data.hasOwnProperty('position')) {
                obj['position'] = ApiClient.convertToType(data['position'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('a')) {
                obj['a'] = ApiClient.convertToType(data['a'], 'String');
            }
            if (data.hasOwnProperty('b')) {
                obj['b'] = ApiClient.convertToType(data['b'], 'String');
            }
        }
        return obj;
    }


}

/**
 * @member {module:model/Commitment.HintEnum} hint
 */
Commitment.prototype['hint'] = undefined;

/**
 * @member {module:model/SigmaBoolean} pubkey
 */
Commitment.prototype['pubkey'] = undefined;

/**
 * @member {String} position
 */
Commitment.prototype['position'] = undefined;

/**
 * @member {module:model/Commitment.TypeEnum} type
 */
Commitment.prototype['type'] = undefined;

/**
 * a group element of the commitment
 * @member {String} a
 */
Commitment.prototype['a'] = undefined;

/**
 * b group element of the commitment (needed for DHT protocol only)
 * @member {String} b
 */
Commitment.prototype['b'] = undefined;





/**
 * Allowed values for the <code>hint</code> property.
 * @enum {String}
 * @readonly
 */
Commitment['HintEnum'] = {

    /**
     * value: "cmtWithSecret"
     * @const
     */
    "cmtWithSecret": "cmtWithSecret",

    /**
     * value: "cmtReal"
     * @const
     */
    "cmtReal": "cmtReal",

    /**
     * value: "cmtSimulated"
     * @const
     */
    "cmtSimulated": "cmtSimulated"
};


/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
Commitment['TypeEnum'] = {

    /**
     * value: "dlog"
     * @const
     */
    "dlog": "dlog",

    /**
     * value: "dht"
     * @const
     */
    "dht": "dht"
};



export default Commitment;

