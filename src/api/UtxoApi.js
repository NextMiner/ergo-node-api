/**
 * Ergo Node API
 * API docs for Ergo Node. Models are shared between all Ergo products
 *
 * The version of the OpenAPI document: 4.0.14
 * Contact: ergoplatform@protonmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ApiError from '../model/ApiError';
import ErgoTransactionOutput from '../model/ErgoTransactionOutput';
import SerializedBox from '../model/SerializedBox';

/**
* Utxo service.
* @module api/UtxoApi
* @version 4.0.14
*/
export default class UtxoApi {

    /**
    * Constructs a new UtxoApi. 
    * @alias module:api/UtxoApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the genesisBoxes operation.
     * @callback module:api/UtxoApi~genesisBoxesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ErgoTransactionOutput>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get genesis boxes (boxes existed before the very first block)
     * @param {module:api/UtxoApi~genesisBoxesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ErgoTransactionOutput>}
     */
    genesisBoxes(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ErgoTransactionOutput];
      return this.apiClient.callApi(
        '/utxo/genesis', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getBoxById operation.
     * @callback module:api/UtxoApi~getBoxByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ErgoTransactionOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get box contents for a box by a unique identifier.
     * @param {String} boxId ID of a wanted box
     * @param {module:api/UtxoApi~getBoxByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ErgoTransactionOutput}
     */
    getBoxById(boxId, callback) {
      let postBody = null;
      // verify the required parameter 'boxId' is set
      if (boxId === undefined || boxId === null) {
        throw new Error("Missing the required parameter 'boxId' when calling getBoxById");
      }

      let pathParams = {
        'boxId': boxId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ErgoTransactionOutput;
      return this.apiClient.callApi(
        '/utxo/byId/{boxId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getBoxByIdBinary operation.
     * @callback module:api/UtxoApi~getBoxByIdBinaryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SerializedBox} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get serialized box from UTXO pool in Base16 encoding by an identifier.
     * @param {String} boxId ID of a wanted box
     * @param {module:api/UtxoApi~getBoxByIdBinaryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SerializedBox}
     */
    getBoxByIdBinary(boxId, callback) {
      let postBody = null;
      // verify the required parameter 'boxId' is set
      if (boxId === undefined || boxId === null) {
        throw new Error("Missing the required parameter 'boxId' when calling getBoxByIdBinary");
      }

      let pathParams = {
        'boxId': boxId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SerializedBox;
      return this.apiClient.callApi(
        '/utxo/byIdBinary/{boxId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getBoxWithPoolById operation.
     * @callback module:api/UtxoApi~getBoxWithPoolByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ErgoTransactionOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get box contents for a box by a unique identifier, from UTXO set and also the mempool.
     * @param {String} boxId ID of a box to obtain
     * @param {module:api/UtxoApi~getBoxWithPoolByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ErgoTransactionOutput}
     */
    getBoxWithPoolById(boxId, callback) {
      let postBody = null;
      // verify the required parameter 'boxId' is set
      if (boxId === undefined || boxId === null) {
        throw new Error("Missing the required parameter 'boxId' when calling getBoxWithPoolById");
      }

      let pathParams = {
        'boxId': boxId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ErgoTransactionOutput;
      return this.apiClient.callApi(
        '/utxo/withPool/byId/{boxId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getBoxWithPoolByIdBinary operation.
     * @callback module:api/UtxoApi~getBoxWithPoolByIdBinaryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SerializedBox} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get serialized box in Base16 encoding by an identifier, considering also the mempool.
     * @param {String} boxId ID of a wanted box
     * @param {module:api/UtxoApi~getBoxWithPoolByIdBinaryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SerializedBox}
     */
    getBoxWithPoolByIdBinary(boxId, callback) {
      let postBody = null;
      // verify the required parameter 'boxId' is set
      if (boxId === undefined || boxId === null) {
        throw new Error("Missing the required parameter 'boxId' when calling getBoxWithPoolByIdBinary");
      }

      let pathParams = {
        'boxId': boxId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SerializedBox;
      return this.apiClient.callApi(
        '/utxo/withPool/byIdBinary/{boxId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
