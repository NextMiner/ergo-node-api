/**
 * Ergo Node API
 * API docs for Ergo Node. Models are shared between all Ergo products
 *
 * The version of the OpenAPI document: 4.0.14
 * Contact: ergoplatform@protonmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.ErgoNodeApi);
  }
}(this, function(expect, ErgoNodeApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new ErgoNodeApi.BlocksApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('BlocksApi', function() {
    describe('getBlockHeaderById', function() {
      it('should call getBlockHeaderById successfully', function(done) {
        //uncomment below and update the code to test getBlockHeaderById
        //instance.getBlockHeaderById(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getBlockTransactionsById', function() {
      it('should call getBlockTransactionsById successfully', function(done) {
        //uncomment below and update the code to test getBlockTransactionsById
        //instance.getBlockTransactionsById(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getChainSlice', function() {
      it('should call getChainSlice successfully', function(done) {
        //uncomment below and update the code to test getChainSlice
        //instance.getChainSlice(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getFullBlockAt', function() {
      it('should call getFullBlockAt successfully', function(done) {
        //uncomment below and update the code to test getFullBlockAt
        //instance.getFullBlockAt(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getFullBlockById', function() {
      it('should call getFullBlockById successfully', function(done) {
        //uncomment below and update the code to test getFullBlockById
        //instance.getFullBlockById(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getHeaderIds', function() {
      it('should call getHeaderIds successfully', function(done) {
        //uncomment below and update the code to test getHeaderIds
        //instance.getHeaderIds(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getLastHeaders', function() {
      it('should call getLastHeaders successfully', function(done) {
        //uncomment below and update the code to test getLastHeaders
        //instance.getLastHeaders(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getModifierById', function() {
      it('should call getModifierById successfully', function(done) {
        //uncomment below and update the code to test getModifierById
        //instance.getModifierById(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getProofForTx', function() {
      it('should call getProofForTx successfully', function(done) {
        //uncomment below and update the code to test getProofForTx
        //instance.getProofForTx(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('sendMinedBlock', function() {
      it('should call sendMinedBlock successfully', function(done) {
        //uncomment below and update the code to test sendMinedBlock
        //instance.sendMinedBlock(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
