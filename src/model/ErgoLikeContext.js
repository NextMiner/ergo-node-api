/**
 * Ergo Node API
 * API docs for Ergo Node. Models are shared between all Ergo products
 *
 * The version of the OpenAPI document: 4.0.14
 * Contact: ergoplatform@protonmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AvlTreeData from './AvlTreeData';
import ErgoLikeTransaction from './ErgoLikeTransaction';
import ErgoTransactionOutput from './ErgoTransactionOutput';
import PreHeader from './PreHeader';
import SigmaHeader from './SigmaHeader';

/**
 * The ErgoLikeContext model module.
 * @module model/ErgoLikeContext
 * @version 4.0.14
 */
class ErgoLikeContext {
    /**
     * Constructs a new <code>ErgoLikeContext</code>.
     * @alias module:model/ErgoLikeContext
     * @param lastBlockUtxoRoot {module:model/AvlTreeData} 
     * @param headers {Array.<module:model/SigmaHeader>} fixed number of last block headers in descending order (first header is the newest one)
     * @param preHeader {module:model/PreHeader} 
     * @param dataBoxes {Array.<module:model/ErgoTransactionOutput>} boxes, that corresponds to id's of `spendingTransaction.dataInputs`
     * @param boxesToSpend {Array.<module:model/ErgoTransactionOutput>} boxes, that corresponds to id's of `spendingTransaction.inputs`
     * @param spendingTransaction {module:model/ErgoLikeTransaction} 
     * @param selfIndex {Number} index of the box in `boxesToSpend` that contains the script we're evaluating
     * @param extension {Object} prover-defined key-value pairs, that may be used inside a script
     * @param validationSettings {String} validation parameters passed to Interpreter.verify to detect soft-fork conditions
     * @param costLimit {Number} hard limit on accumulated execution cost, if exceeded lead to CostLimitException to be thrown
     * @param initCost {Number} initial value of execution cost already accumulated before Interpreter.verify is called
     */
    constructor(lastBlockUtxoRoot, headers, preHeader, dataBoxes, boxesToSpend, spendingTransaction, selfIndex, extension, validationSettings, costLimit, initCost) { 
        
        ErgoLikeContext.initialize(this, lastBlockUtxoRoot, headers, preHeader, dataBoxes, boxesToSpend, spendingTransaction, selfIndex, extension, validationSettings, costLimit, initCost);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, lastBlockUtxoRoot, headers, preHeader, dataBoxes, boxesToSpend, spendingTransaction, selfIndex, extension, validationSettings, costLimit, initCost) { 
        obj['lastBlockUtxoRoot'] = lastBlockUtxoRoot;
        obj['headers'] = headers;
        obj['preHeader'] = preHeader;
        obj['dataBoxes'] = dataBoxes;
        obj['boxesToSpend'] = boxesToSpend;
        obj['spendingTransaction'] = spendingTransaction;
        obj['selfIndex'] = selfIndex;
        obj['extension'] = extension;
        obj['validationSettings'] = validationSettings;
        obj['costLimit'] = costLimit;
        obj['initCost'] = initCost;
    }

    /**
     * Constructs a <code>ErgoLikeContext</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ErgoLikeContext} obj Optional instance to populate.
     * @return {module:model/ErgoLikeContext} The populated <code>ErgoLikeContext</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ErgoLikeContext();

            if (data.hasOwnProperty('lastBlockUtxoRoot')) {
                obj['lastBlockUtxoRoot'] = AvlTreeData.constructFromObject(data['lastBlockUtxoRoot']);
            }
            if (data.hasOwnProperty('headers')) {
                obj['headers'] = ApiClient.convertToType(data['headers'], [SigmaHeader]);
            }
            if (data.hasOwnProperty('preHeader')) {
                obj['preHeader'] = PreHeader.constructFromObject(data['preHeader']);
            }
            if (data.hasOwnProperty('dataBoxes')) {
                obj['dataBoxes'] = ApiClient.convertToType(data['dataBoxes'], [ErgoTransactionOutput]);
            }
            if (data.hasOwnProperty('boxesToSpend')) {
                obj['boxesToSpend'] = ApiClient.convertToType(data['boxesToSpend'], [ErgoTransactionOutput]);
            }
            if (data.hasOwnProperty('spendingTransaction')) {
                obj['spendingTransaction'] = ErgoLikeTransaction.constructFromObject(data['spendingTransaction']);
            }
            if (data.hasOwnProperty('selfIndex')) {
                obj['selfIndex'] = ApiClient.convertToType(data['selfIndex'], 'Number');
            }
            if (data.hasOwnProperty('extension')) {
                obj['extension'] = ApiClient.convertToType(data['extension'], Object);
            }
            if (data.hasOwnProperty('validationSettings')) {
                obj['validationSettings'] = ApiClient.convertToType(data['validationSettings'], 'String');
            }
            if (data.hasOwnProperty('costLimit')) {
                obj['costLimit'] = ApiClient.convertToType(data['costLimit'], 'Number');
            }
            if (data.hasOwnProperty('initCost')) {
                obj['initCost'] = ApiClient.convertToType(data['initCost'], 'Number');
            }
        }
        return obj;
    }


}

/**
 * @member {module:model/AvlTreeData} lastBlockUtxoRoot
 */
ErgoLikeContext.prototype['lastBlockUtxoRoot'] = undefined;

/**
 * fixed number of last block headers in descending order (first header is the newest one)
 * @member {Array.<module:model/SigmaHeader>} headers
 */
ErgoLikeContext.prototype['headers'] = undefined;

/**
 * @member {module:model/PreHeader} preHeader
 */
ErgoLikeContext.prototype['preHeader'] = undefined;

/**
 * boxes, that corresponds to id's of `spendingTransaction.dataInputs`
 * @member {Array.<module:model/ErgoTransactionOutput>} dataBoxes
 */
ErgoLikeContext.prototype['dataBoxes'] = undefined;

/**
 * boxes, that corresponds to id's of `spendingTransaction.inputs`
 * @member {Array.<module:model/ErgoTransactionOutput>} boxesToSpend
 */
ErgoLikeContext.prototype['boxesToSpend'] = undefined;

/**
 * @member {module:model/ErgoLikeTransaction} spendingTransaction
 */
ErgoLikeContext.prototype['spendingTransaction'] = undefined;

/**
 * index of the box in `boxesToSpend` that contains the script we're evaluating
 * @member {Number} selfIndex
 */
ErgoLikeContext.prototype['selfIndex'] = undefined;

/**
 * prover-defined key-value pairs, that may be used inside a script
 * @member {Object} extension
 */
ErgoLikeContext.prototype['extension'] = undefined;

/**
 * validation parameters passed to Interpreter.verify to detect soft-fork conditions
 * @member {String} validationSettings
 */
ErgoLikeContext.prototype['validationSettings'] = undefined;

/**
 * hard limit on accumulated execution cost, if exceeded lead to CostLimitException to be thrown
 * @member {Number} costLimit
 */
ErgoLikeContext.prototype['costLimit'] = undefined;

/**
 * initial value of execution cost already accumulated before Interpreter.verify is called
 * @member {Number} initCost
 */
ErgoLikeContext.prototype['initCost'] = undefined;






export default ErgoLikeContext;

