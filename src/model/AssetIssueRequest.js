/**
 * Ergo Node API
 * API docs for Ergo Node. Models are shared between all Ergo products
 *
 * The version of the OpenAPI document: 4.0.14
 * Contact: ergoplatform@protonmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The AssetIssueRequest model module.
 * @module model/AssetIssueRequest
 * @version 4.0.14
 */
class AssetIssueRequest {
    /**
     * Constructs a new <code>AssetIssueRequest</code>.
     * Request for generation of asset issue transaction
     * @alias module:model/AssetIssueRequest
     * @param amount {Number} Supply amount
     * @param name {String} Assets name
     * @param description {String} Assets description
     * @param decimals {Number} Number of decimal places
     */
    constructor(amount, name, description, decimals) { 
        
        AssetIssueRequest.initialize(this, amount, name, description, decimals);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, amount, name, description, decimals) { 
        obj['amount'] = amount;
        obj['name'] = name;
        obj['description'] = description;
        obj['decimals'] = decimals;
    }

    /**
     * Constructs a <code>AssetIssueRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AssetIssueRequest} obj Optional instance to populate.
     * @return {module:model/AssetIssueRequest} The populated <code>AssetIssueRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AssetIssueRequest();

            if (data.hasOwnProperty('address')) {
                obj['address'] = ApiClient.convertToType(data['address'], 'String');
            }
            if (data.hasOwnProperty('ergValue')) {
                obj['ergValue'] = ApiClient.convertToType(data['ergValue'], 'Number');
            }
            if (data.hasOwnProperty('amount')) {
                obj['amount'] = ApiClient.convertToType(data['amount'], 'Number');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('decimals')) {
                obj['decimals'] = ApiClient.convertToType(data['decimals'], 'Number');
            }
            if (data.hasOwnProperty('registers')) {
                obj['registers'] = ApiClient.convertToType(data['registers'], {'String': 'String'});
            }
        }
        return obj;
    }


}

/**
 * Encoded Ergo Address
 * @member {String} address
 */
AssetIssueRequest.prototype['address'] = undefined;

/**
 * Optional, amount of ergs to be put into box with issued assets
 * @member {Number} ergValue
 */
AssetIssueRequest.prototype['ergValue'] = undefined;

/**
 * Supply amount
 * @member {Number} amount
 */
AssetIssueRequest.prototype['amount'] = undefined;

/**
 * Assets name
 * @member {String} name
 */
AssetIssueRequest.prototype['name'] = undefined;

/**
 * Assets description
 * @member {String} description
 */
AssetIssueRequest.prototype['description'] = undefined;

/**
 * Number of decimal places
 * @member {Number} decimals
 */
AssetIssueRequest.prototype['decimals'] = undefined;

/**
 * Ergo box registers
 * @member {Object.<String, String>} registers
 */
AssetIssueRequest.prototype['registers'] = undefined;






export default AssetIssueRequest;

