/**
 * Ergo Node API
 * API docs for Ergo Node. Models are shared between all Ergo products
 *
 * The version of the OpenAPI document: 4.0.14
 * Contact: ergoplatform@protonmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AddressValidity from '../model/AddressValidity';
import ApiError from '../model/ApiError';

/**
* Utils service.
* @module api/UtilsApi
* @version 4.0.14
*/
export default class UtilsApi {

    /**
    * Constructs a new UtilsApi. 
    * @alias module:api/UtilsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the addressToRaw operation.
     * @callback module:api/UtilsApi~addressToRawCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Convert Pay-To-Public-Key Address to raw representation (hex-encoded serialized curve point)
     * @param {String} address address to extract public key from
     * @param {module:api/UtilsApi~addressToRawCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    addressToRaw(address, callback) {
      let postBody = null;
      // verify the required parameter 'address' is set
      if (address === undefined || address === null) {
        throw new Error("Missing the required parameter 'address' when calling addressToRaw");
      }

      let pathParams = {
        'address': address
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/utils/addressToRaw/{address}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the checkAddressValidity operation.
     * @callback module:api/UtilsApi~checkAddressValidityCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AddressValidity} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Check address validity
     * @param {String} address address to check
     * @param {module:api/UtilsApi~checkAddressValidityCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AddressValidity}
     */
    checkAddressValidity(address, callback) {
      let postBody = null;
      // verify the required parameter 'address' is set
      if (address === undefined || address === null) {
        throw new Error("Missing the required parameter 'address' when calling checkAddressValidity");
      }

      let pathParams = {
        'address': address
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AddressValidity;
      return this.apiClient.callApi(
        '/utils/address/{address}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ergoTreeToAddress operation.
     * @callback module:api/UtilsApi~ergoTreeToAddressCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Generate Ergo address from hex-encoded ErgoTree
     * @param {String} ergoTreeHex ErgoTree to derive an address from
     * @param {module:api/UtilsApi~ergoTreeToAddressCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    ergoTreeToAddress(ergoTreeHex, callback) {
      let postBody = null;
      // verify the required parameter 'ergoTreeHex' is set
      if (ergoTreeHex === undefined || ergoTreeHex === null) {
        throw new Error("Missing the required parameter 'ergoTreeHex' when calling ergoTreeToAddress");
      }

      let pathParams = {
        'ergoTreeHex': ergoTreeHex
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/utils/ergoTreeToAddress/{ergoTreeHex}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getRandomSeed operation.
     * @callback module:api/UtilsApi~getRandomSeedCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get random seed of 32 bytes
     * @param {module:api/UtilsApi~getRandomSeedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    getRandomSeed(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/utils/seed', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getRandomSeedWithLength operation.
     * @callback module:api/UtilsApi~getRandomSeedWithLengthCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Generate random seed of specified length in bytes
     * @param {String} length seed length in bytes
     * @param {module:api/UtilsApi~getRandomSeedWithLengthCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    getRandomSeedWithLength(length, callback) {
      let postBody = null;
      // verify the required parameter 'length' is set
      if (length === undefined || length === null) {
        throw new Error("Missing the required parameter 'length' when calling getRandomSeedWithLength");
      }

      let pathParams = {
        'length': length
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/utils/seed/{length}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the hashBlake2b operation.
     * @callback module:api/UtilsApi~hashBlake2bCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return Blake2b hash of specified message
     * @param {String} body 
     * @param {module:api/UtilsApi~hashBlake2bCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    hashBlake2b(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling hashBlake2b");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/utils/hash/blake2b', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the rawToAddress operation.
     * @callback module:api/UtilsApi~rawToAddressCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Generate Pay-To-Public-Key address from hex-encoded raw pubkey (secp256k1 serialized point)
     * @param {String} pubkeyHex public key to get address from
     * @param {module:api/UtilsApi~rawToAddressCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    rawToAddress(pubkeyHex, callback) {
      let postBody = null;
      // verify the required parameter 'pubkeyHex' is set
      if (pubkeyHex === undefined || pubkeyHex === null) {
        throw new Error("Missing the required parameter 'pubkeyHex' when calling rawToAddress");
      }

      let pathParams = {
        'pubkeyHex': pubkeyHex
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/utils/rawToAddress/{pubkeyHex}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
